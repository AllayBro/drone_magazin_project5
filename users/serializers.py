from rest_framework import serializers
from django.contrib.auth import get_user_model
from drones.models import Drone, Booking
from .models import CustomUser

User = get_user_model()


# üöÅ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥—Ä–æ–Ω–∞
class DroneSerializer(serializers.ModelSerializer):
    class Meta:
        model = Drone
        fields = '__all__'


# üìÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
class BookingSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField(read_only=True)

    class Meta:
        model = Booking
        fields = '__all__'


# üë§ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'role', 'is_staff', 'date_joined']


# üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
class UserRegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, min_length=6)
    password2 = serializers.CharField(write_only=True, label='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è')

    class Meta:
        model = User
        fields = ['nickname', 'email', 'password', 'password2', 'role']  # ‚õî username —É–±—Ä–∞–Ω

    def validate(self, data):
        if data['password'] != data['password2']:
            raise serializers.ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return data

    def create(self, validated_data):
        validated_data.pop('password2', None)

        # üëá –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è username –∏–∑ email –∏–ª–∏ nickname
        username = validated_data.get('nickname') or validated_data.get('email').split('@')[0]
        i = 1
        base_username = username
        while User.objects.filter(username=username).exists():
            username = f"{base_username}{i}"
            i += 1

        return User.objects.create_user(
            username=username,  # ‚úÖ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
            email=validated_data['email'],
            password=validated_data['password'],
            nickname=validated_data.get('nickname', ''),
            role=validated_data.get('role', 'user')
        )


# üîê –õ–æ–≥–∏–Ω
class LoginSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField()


# ‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = ('id', 'username', 'email', 'nickname', 'avatar', 'country', 'city', 'region')
        read_only_fields = ('id', 'username', 'email')
